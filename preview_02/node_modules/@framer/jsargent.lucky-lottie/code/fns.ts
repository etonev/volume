export function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}


export function parseData(data, colorObj) {
    let { r, g, b } = colorObj;
    let newData = JSON.parse(JSON.stringify(data));
    let { layers } = newData
    
    layers.forEach(layer => {
        let { shapes } = layer;
        shapes.forEach(shape => {
            let { it } = shape;
            it.forEach(it => {
                if (it.ty === "fl") {
                    let { k } = it.c;
                    if (k.length === 2) {
                        let { e, s } = k[0]
                        e[0] = r / 255;
                        e[1] = g / 255;
                        e[2] = b / 255;
                        s[0] = r / 255;
                        s[1] = g / 255;
                        s[2] = b / 255;
                    }
                    else {
                        k[0] = r / 255;
                        k[1] = g / 255;
                        k[2] = b / 255;
                    }
                }
                else if (it.ty === "st") {
                    let { k } = it.c;
                    if (k.length === 2) {
                        let { e, s } = k[0]
                        e[0] = r / 255;
                        e[1] = g / 255;
                        e[2] = b / 255;
                        s[0] = r / 255;
                        s[1] = g / 255;
                        s[2] = b / 255;
                    }
                }
            })
        })
    })
    return newData;
}
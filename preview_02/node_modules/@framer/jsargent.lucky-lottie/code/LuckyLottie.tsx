import * as React from 'react'
import { ControlType } from 'framer';
import axios from 'axios'
const lottie = require('lottie-web')

interface Props {
    lottieUrl: string,
    lottieType: string
    percent: number,
    url: string,
    hex: string,
    play: string,
    id: string
}

interface State {
    animate: any,
    data: any
}
export class LuckyLottie extends React.Component<Props, State> {

    constructor(props) {
        super(props);
        this.state = {
            animate: null,
            data: null
        }
        this.goToFrame = this.goToFrame.bind(this);
    }

    static defaultProps = {
        lottieUrl: 'https://assets4.lottiefiles.com/packages/lf20_tkM0Bo.json',
        lottieType: 'percent',
        percent: 50,
        play: "▶"
    }

    static propertyControls = {
        lottieUrl: {
            type: ControlType.String
        },
        lottieType: {
            type: ControlType.SegmentedEnum,
            options: ["animate", "percent"]
        },
        percent: {
            type: ControlType.Number,
            min: 0,
            max: 100,
            step: 1,
            unit: "%",
            hidden: props => props.lottieType === "animate"
        },
        play: {
            type: ControlType.SegmentedEnum,
            options: ["▶", "❙❙"],
            hidden: props => props.lottieType === "percent"
        }
    }
    async componentDidMount() {
        await this.setData();
        if (this.props.lottieType === "percent") {
            await this.loadImage()
        }
        else {
            await this.loadAnimation()
            await this.controlPlayState();
        }
    }

    async componentDidUpdate(prevProps, prevState) {
        if (prevProps.lottieUrl !== this.props.lottieUrl) {
            await this.setData();
            if (this.props.lottieType === "animate") {
                await this.loadAnimation();
                this.state.animate.play();
            }
            else {
                await this.loadImage();
            }
        }

        if (prevProps.percent !== this.props.percent) {
            this.goToFrame();
        }

        if (prevProps.play !== this.props.play) {
            this.controlPlayState()
        }
        if (prevProps.lottieType !== this.props.lottieType) {
            if (this.props.lottieType === "animate") {
                await this.loadAnimation();    
                this.state.animate.play();           
            }
            else {
                await this.loadImage();
            }
        }
    }

    setData = async () => {
        await this.destroyAnimation();
        await axios.get(this.props.lottieUrl).then((data: any) => {
            this.setState({ data: data.data})
        })

    }

    controlPlayState = () => {
        if (this.state.animate) {
            if (this.props.play === "❙❙") {
                this.state.animate.pause();
            }
            else {
                this.state.animate.play();
            }
        }
    }

    async loadAnimation() {
        let { data } = this.state;
        this.destroyAnimation();
        let animate = lottie.loadAnimation({
            container: document.getElementById(this.props.id),
            renderer: 'svg',
            loop: true,
            autoplay: true,
            animationData: data
        })

        this.setState({ animate });
    }

    async loadImage() {
        let { data } = this.state;
        this.destroyAnimation();

        let animate = lottie.loadAnimation({
            container: document.getElementById(this.props.id),
            renderer: 'svg',
            loop: false,
            autoplay: false,
            animationData: data
        })

        //just waiting for the lottie to get set
        await this.timeout(100);
        await this.setState({ animate })
        this.goToFrame();
    }

    destroyAnimation() {
        if (this.state.animate) {
            this.state.animate.destroy();
        }
    }

    // without waiting the frame gets set too quickly, and the lottie is inaccessible
    timeout(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    goToFrame() {
        let { animate, animate: { totalFrames } } = this.state;
        let percentage = totalFrames * .01;
        let framePercentage = (this.props.percent * percentage);
        animate.goToAndStop(Math.floor(framePercentage), true);
    }

    render() {
        return (
            <div onClick={this.goToFrame} style={{ width: '100%', height: '100%' }} id={this.props.id} />
        )
    }
}